#!/usr/bin/python
#
# Copyright (c) 2018-2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#

import sys
import json
import subprocess
import os
from argparse import ArgumentParser
from typing import List


def discover_pmd_libraries(base_dir: str = "/usr/lib/x86_64-linux-gnu/dpdk") -> List[str]:
    """Return a list of full paths to static PMD libraries under *base_dir*.
    Only regular, non-symlinked shared objects whose names start with
    ``librte_`` **and** contain ``.so.`` are considered.
    """
    libraries: List[str] = []

    if not os.path.exists(base_dir):
        return libraries

    for subdir in os.listdir(base_dir):
        if not subdir.startswith("pmds-"):
            continue

        pmds_path = os.path.join(base_dir, subdir)
        if not os.path.isdir(pmds_path):
            continue

        for lib in os.listdir(pmds_path):
            if lib.startswith("librte_") and ".so." in lib:
                lib_path = os.path.join(pmds_path, lib)
                if os.path.isfile(lib_path) and not os.path.islink(lib_path):
                    libraries.append(lib_path)

    return libraries


def main() -> int:
    """Parses the command-line arguments, inspects the primary *ELF* binary
    (usually *ovs-vswitchd*) using *dpdk-pmdinfo*, and if necessary falls
    back to individual PMD shared libraries to determine support for the
    supplied PCI Vendor/Device IDs.
    """
    parser = ArgumentParser(description="Query vswitch NIC support")

    parser.add_argument("-v", "--vendor", dest="vid",
                        help="Vendor ID",
                        type=lambda x: hex(int(x, 0)),
                        action='store', metavar="HEX",
                        required=True)
    parser.add_argument("-d", "--device", dest="did",
                        help="Device ID",
                        type=lambda x: hex(int(x, 0)),
                        action='store', metavar="HEX",
                        required=True)
    parser.add_argument("-p", "--pmdinfo", dest="pmdinfo",
                        help="Path to target dpdk-pmdinfo script",
                        default="/usr/bin/dpdk-pmdinfo.py",
                        type=str, action='store')
    parser.add_argument("-e", "--elfbinary", dest="elf",
                        help="Path to target ELF file",
                        default="/usr/sbin/ovs-vswitchd",
                        type=str, action='store')
    args = parser.parse_args()

    targets: List[str] = [args.elf]

    for i, target in enumerate(targets):
        cmd = "python {} -r {}".format(args.pmdinfo, target)
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True,
                universal_newlines=True)
        out, err = p.communicate()
        result = out.split('\n')

        if i == 0 and not any(line.strip() for line in result):
            targets.extend(discover_pmd_libraries())

        for line in result:
            if not line:
                continue
            try:
                pmd_info = json.loads(line)
                supported_devices = pmd_info['pci_ids']

                for supported_device in supported_devices:
                    vid = hex(supported_device[0])
                    did = hex(supported_device[1])

                    if vid == args.vid and did == args.did:
                        print("Vendor ID: %s Device ID: %s is supported" %
                             (args.vid, args.did))
                        return 0
            except (json.JSONDecodeError, KeyError):
                continue

    print("Vendor ID: %s Device ID: %s is not supported" %
         (args.vid, args.did))
    return 1


if __name__ == "__main__":
    ret = main()
    sys.exit(ret)
